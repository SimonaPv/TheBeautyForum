// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheBeautyForum.Web.Data;

#nullable disable

namespace TheBeautyForum.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("6774a48a-7836-4ce6-9ef1-ea7be75b4ec5"),
                            RoleId = new Guid("56bdecaf-285f-4a8e-b650-8bc997be759d")
                        },
                        new
                        {
                            UserId = new Guid("b313e2e1-0270-4a86-924b-71256500be8b"),
                            RoleId = new Guid("71d6d7d8-f4f6-42b5-a9a9-ed2d3ef0bc73")
                        },
                        new
                        {
                            UserId = new Guid("1674d538-3cf0-4a6e-bc27-aa070a230647"),
                            RoleId = new Guid("71d6d7d8-f4f6-42b5-a9a9-ed2d3ef0bc73")
                        },
                        new
                        {
                            UserId = new Guid("e482292a-5399-4938-9788-6d76fcb1b4d9"),
                            RoleId = new Guid("5a322cf5-7101-4d4a-9e08-16382fc0a641")
                        },
                        new
                        {
                            UserId = new Guid("3bea7392-a556-4a99-86c2-8cb244868283"),
                            RoleId = new Guid("5a322cf5-7101-4d4a-9e08-16382fc0a641")
                        },
                        new
                        {
                            UserId = new Guid("2fceb9b7-fdd1-4062-b6d4-b81b3d7fd62d"),
                            RoleId = new Guid("5a322cf5-7101-4d4a-9e08-16382fc0a641")
                        },
                        new
                        {
                            UserId = new Guid("9f9bfaa5-da01-49bf-a819-3b88acf7487f"),
                            RoleId = new Guid("5a322cf5-7101-4d4a-9e08-16382fc0a641")
                        },
                        new
                        {
                            UserId = new Guid("1eb3a2eb-2184-4f8e-8ddd-569ea1522f2b"),
                            RoleId = new Guid("5a322cf5-7101-4d4a-9e08-16382fc0a641")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TheBeautyForum.Data.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StudioId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1790311d-5712-44a9-abbd-3bfc47802419"),
                            CategoryId = new Guid("4ebb7e23-2a49-4451-8c96-b5c6de99900e"),
                            Description = "Monthly manicure appointment.",
                            EndDate = new DateTime(2024, 7, 22, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 7, 22, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            StudioId = new Guid("bf2832b2-5b62-471b-9980-583753504ca6"),
                            UserId = new Guid("e482292a-5399-4938-9788-6d76fcb1b4d9")
                        },
                        new
                        {
                            Id = new Guid("f1a43f31-6d82-442b-8f89-941f7b6da3ec"),
                            CategoryId = new Guid("db7effe2-16bb-4539-9dec-0bda384b859f"),
                            Description = "I want slight balayage.",
                            EndDate = new DateTime(2024, 6, 20, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 6, 20, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            StudioId = new Guid("0d753e1d-c98b-47c7-b260-0377048c529a"),
                            UserId = new Guid("3bea7392-a556-4a99-86c2-8cb244868283")
                        },
                        new
                        {
                            Id = new Guid("79e4af3b-6bcf-4476-8705-2457836a1968"),
                            CategoryId = new Guid("569a4a94-57b0-48d3-930c-0d3ca92f7eb8"),
                            Description = "I need a relaxing massage.",
                            EndDate = new DateTime(2024, 6, 4, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 6, 4, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            StudioId = new Guid("df44a062-9586-4815-8126-99c240433b22"),
                            UserId = new Guid("3bea7392-a556-4a99-86c2-8cb244868283")
                        },
                        new
                        {
                            Id = new Guid("9b76ada8-1c16-4f05-b308-1c4ff3de137f"),
                            CategoryId = new Guid("db7effe2-16bb-4539-9dec-0bda384b859f"),
                            Description = "I want platinum blond.",
                            EndDate = new DateTime(2024, 6, 18, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 6, 18, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            StudioId = new Guid("0d753e1d-c98b-47c7-b260-0377048c529a"),
                            UserId = new Guid("2fceb9b7-fdd1-4062-b6d4-b81b3d7fd62d")
                        },
                        new
                        {
                            Id = new Guid("8180ba4e-0941-4b06-abfa-e36a25ddb881"),
                            CategoryId = new Guid("1125ebe4-4f81-4bb8-90ee-aceaf509c4f3"),
                            Description = "I need care for bleached hair.",
                            EndDate = new DateTime(2024, 6, 20, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 6, 20, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            StudioId = new Guid("c7998d5b-0017-4924-8544-49b4a276afe1"),
                            UserId = new Guid("2fceb9b7-fdd1-4062-b6d4-b81b3d7fd62d")
                        },
                        new
                        {
                            Id = new Guid("2220ba4e-0941-4b06-abfa-e36a25ddb881"),
                            CategoryId = new Guid("1125ebe4-4f81-4bb8-90ee-aceaf509c4f3"),
                            Description = "I need care for bleached hair.",
                            EndDate = new DateTime(2024, 3, 20, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 3, 20, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            StudioId = new Guid("c7998d5b-0017-4924-8544-49b4a276afe1"),
                            UserId = new Guid("2fceb9b7-fdd1-4062-b6d4-b81b3d7fd62d")
                        });
                });

            modelBuilder.Entity("TheBeautyForum.Data.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8859c909-f5cf-4f72-ba53-5a9e6dfac34d"),
                            Name = "Hairstyle"
                        },
                        new
                        {
                            Id = new Guid("3be6b016-9b6a-4f68-b7ee-bf32293acca9"),
                            Name = "Haircut"
                        },
                        new
                        {
                            Id = new Guid("db7effe2-16bb-4539-9dec-0bda384b859f"),
                            Name = "Hair coloring"
                        },
                        new
                        {
                            Id = new Guid("1125ebe4-4f81-4bb8-90ee-aceaf509c4f3"),
                            Name = "Haircare"
                        },
                        new
                        {
                            Id = new Guid("4ebb7e23-2a49-4451-8c96-b5c6de99900e"),
                            Name = "Manicure"
                        },
                        new
                        {
                            Id = new Guid("2da87f9f-d52a-4d4b-a8c6-37200c4cfeea"),
                            Name = "Pedicure"
                        },
                        new
                        {
                            Id = new Guid("f74035eb-e32d-4ddf-b381-8a757c7d5152"),
                            Name = "Full SPA"
                        },
                        new
                        {
                            Id = new Guid("569a4a94-57b0-48d3-930c-0d3ca92f7eb8"),
                            Name = "Full body massage"
                        },
                        new
                        {
                            Id = new Guid("42334109-d996-4339-b78c-4ba73fcdd824"),
                            Name = "Stone massage"
                        },
                        new
                        {
                            Id = new Guid("6f3f3c4a-9213-48a9-a112-362e10188983"),
                            Name = "Aromatherapy massage"
                        },
                        new
                        {
                            Id = new Guid("93474d31-0c93-4d01-9130-3b967b09a74a"),
                            Name = "Reiki"
                        },
                        new
                        {
                            Id = new Guid("f63198ba-741e-42ca-b112-f08c0e193bbb"),
                            Name = "Thai massage"
                        },
                        new
                        {
                            Id = new Guid("b9b9950e-5ad6-4f44-87b0-e8811e9a59e2"),
                            Name = "Bali massage"
                        },
                        new
                        {
                            Id = new Guid("766f75cf-899f-491e-9c5a-6ff5949159a1"),
                            Name = "Facial stone therapy"
                        },
                        new
                        {
                            Id = new Guid("1c39f073-d448-4e8b-9079-369aab2d816b"),
                            Name = "Facial therapy"
                        },
                        new
                        {
                            Id = new Guid("57edeb42-3369-4c8c-b2d2-8c6c0ac49cfc"),
                            Name = "Facial cleansing"
                        },
                        new
                        {
                            Id = new Guid("d079d974-8e76-4b0c-8c41-291ecd9042b1"),
                            Name = "Anti-age therapy"
                        },
                        new
                        {
                            Id = new Guid("d5cbb5ce-65e7-4a6a-a03c-fd13fcf304de"),
                            Name = "Microneedling"
                        },
                        new
                        {
                            Id = new Guid("acc8a306-8a0b-4ede-8a03-f1ab6e90eed4"),
                            Name = "Microblading"
                        });
                });

            modelBuilder.Entity("TheBeautyForum.Data.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PublicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UrlPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId")
                        .IsUnique();

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dd2c855b-e8cb-43c8-8437-c8fbd54444a8"),
                            PublicationId = new Guid("3dff0a05-d97b-44f5-9118-80a276adad91"),
                            UrlPath = "https://res.cloudinary.com/di1lcwb4r/image/upload/v1706685966/oaxk2efd2zcewio2tciv.jpg"
                        },
                        new
                        {
                            Id = new Guid("e121ce4c-f437-4696-99fa-1859d1de6780"),
                            PublicationId = new Guid("09d4bfa2-1b65-4085-ad6c-010c20427409"),
                            UrlPath = "https://res.cloudinary.com/di1lcwb4r/image/upload/v1706685965/bypcq7r5kqpgjbm8keka.jpg"
                        },
                        new
                        {
                            Id = new Guid("120dbf97-04a7-4cf4-a4f9-aea8ffc3037f"),
                            PublicationId = new Guid("368c82c4-7046-44ee-8315-149e4527bd47"),
                            UrlPath = "https://res.cloudinary.com/di1lcwb4r/image/upload/v1706685966/y7uikxn4ib53acmxt978.jpg"
                        },
                        new
                        {
                            Id = new Guid("5b637ca8-0eaf-41d7-ae31-6f506bbcd812"),
                            PublicationId = new Guid("35b859db-5567-4336-bd2b-34aea67bf26a"),
                            UrlPath = "https://res.cloudinary.com/di1lcwb4r/image/upload/v1706685965/x2kx2oeyhz22ouwandcr.jpg"
                        },
                        new
                        {
                            Id = new Guid("02fa054e-3efe-4923-b267-aca9ac769f81"),
                            PublicationId = new Guid("765a831a-5e10-43a8-adf2-e7e8d62fc7e0"),
                            UrlPath = "https://res.cloudinary.com/di1lcwb4r/image/upload/v1706685966/v9b0ghriku0s2pfsppaj.jpg"
                        });
                });

            modelBuilder.Entity("TheBeautyForum.Data.Models.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PublicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ece7c6e7-4835-4efb-b79c-929f0b1ce9f3"),
                            PublicationId = new Guid("765a831a-5e10-43a8-adf2-e7e8d62fc7e0"),
                            UserId = new Guid("1eb3a2eb-2184-4f8e-8ddd-569ea1522f2b")
                        },
                        new
                        {
                            Id = new Guid("31322844-7f44-437a-8545-222497d89720"),
                            PublicationId = new Guid("765a831a-5e10-43a8-adf2-e7e8d62fc7e0"),
                            UserId = new Guid("9f9bfaa5-da01-49bf-a819-3b88acf7487f")
                        },
                        new
                        {
                            Id = new Guid("e132c310-99a1-4058-8781-11c28018e186"),
                            PublicationId = new Guid("765a831a-5e10-43a8-adf2-e7e8d62fc7e0"),
                            UserId = new Guid("2fceb9b7-fdd1-4062-b6d4-b81b3d7fd62d")
                        },
                        new
                        {
                            Id = new Guid("98d71ed7-2895-4f0f-b0ec-1a25752efb50"),
                            PublicationId = new Guid("765a831a-5e10-43a8-adf2-e7e8d62fc7e0"),
                            UserId = new Guid("3bea7392-a556-4a99-86c2-8cb244868283")
                        },
                        new
                        {
                            Id = new Guid("4ca23634-c46b-470b-aa16-179763aad180"),
                            PublicationId = new Guid("368c82c4-7046-44ee-8315-149e4527bd47"),
                            UserId = new Guid("1eb3a2eb-2184-4f8e-8ddd-569ea1522f2b")
                        },
                        new
                        {
                            Id = new Guid("0e6636fd-f06f-4277-b928-18e4e2df9e52"),
                            PublicationId = new Guid("368c82c4-7046-44ee-8315-149e4527bd47"),
                            UserId = new Guid("9f9bfaa5-da01-49bf-a819-3b88acf7487f")
                        },
                        new
                        {
                            Id = new Guid("edac65d6-e0ef-44b4-b72b-734eb20ec9ff"),
                            PublicationId = new Guid("368c82c4-7046-44ee-8315-149e4527bd47"),
                            UserId = new Guid("e482292a-5399-4938-9788-6d76fcb1b4d9")
                        },
                        new
                        {
                            Id = new Guid("d9274446-edf6-43d0-a892-16ea8e41b785"),
                            PublicationId = new Guid("35b859db-5567-4336-bd2b-34aea67bf26a"),
                            UserId = new Guid("1eb3a2eb-2184-4f8e-8ddd-569ea1522f2b")
                        },
                        new
                        {
                            Id = new Guid("284a98fd-2559-43f5-9aea-854c747b2d66"),
                            PublicationId = new Guid("35b859db-5567-4336-bd2b-34aea67bf26a"),
                            UserId = new Guid("2fceb9b7-fdd1-4062-b6d4-b81b3d7fd62d")
                        });
                });

            modelBuilder.Entity("TheBeautyForum.Data.Models.Publication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("StudioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudioId");

                    b.HasIndex("UserId");

                    b.ToTable("Publications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3dff0a05-d97b-44f5-9118-80a276adad91"),
                            DatePosted = new DateTime(2024, 2, 10, 15, 23, 0, 0, DateTimeKind.Unspecified),
                            Description = "Love my new nails!! #nailDay #newNails",
                            StudioId = new Guid("bf2832b2-5b62-471b-9980-583753504ca6"),
                            UserId = new Guid("e482292a-5399-4938-9788-6d76fcb1b4d9")
                        },
                        new
                        {
                            Id = new Guid("09d4bfa2-1b65-4085-ad6c-010c20427409"),
                            DatePosted = new DateTime(2024, 2, 9, 16, 46, 0, 0, DateTimeKind.Unspecified),
                            Description = "Me time.. #spaDay #SPA",
                            StudioId = new Guid("df44a062-9586-4815-8126-99c240433b22"),
                            UserId = new Guid("3bea7392-a556-4a99-86c2-8cb244868283")
                        },
                        new
                        {
                            Id = new Guid("368c82c4-7046-44ee-8315-149e4527bd47"),
                            DatePosted = new DateTime(2024, 2, 9, 12, 4, 0, 0, DateTimeKind.Unspecified),
                            Description = "A needed day OFF! #relax",
                            StudioId = new Guid("d8fbc428-62b8-42aa-b3d7-b40658072dca"),
                            UserId = new Guid("2fceb9b7-fdd1-4062-b6d4-b81b3d7fd62d")
                        },
                        new
                        {
                            Id = new Guid("35b859db-5567-4336-bd2b-34aea67bf26a"),
                            DatePosted = new DateTime(2024, 2, 11, 9, 11, 0, 0, DateTimeKind.Unspecified),
                            Description = "Guess who's getting MARRIED!! #bride #love",
                            StudioId = new Guid("0d753e1d-c98b-47c7-b260-0377048c529a"),
                            UserId = new Guid("9f9bfaa5-da01-49bf-a819-3b88acf7487f")
                        },
                        new
                        {
                            Id = new Guid("765a831a-5e10-43a8-adf2-e7e8d62fc7e0"),
                            DatePosted = new DateTime(2024, 2, 13, 13, 19, 0, 0, DateTimeKind.Unspecified),
                            Description = "Your curls can dream.. #curlyHair #healthy",
                            StudioId = new Guid("c7998d5b-0017-4924-8544-49b4a276afe1"),
                            UserId = new Guid("1eb3a2eb-2184-4f8e-8ddd-569ea1522f2b")
                        });
                });

            modelBuilder.Entity("TheBeautyForum.Data.Models.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudioId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("168884a2-fc77-4169-836f-dc0a0599bc2e"),
                            StudioId = new Guid("d8fbc428-62b8-42aa-b3d7-b40658072dca"),
                            UserId = new Guid("2fceb9b7-fdd1-4062-b6d4-b81b3d7fd62d"),
                            Value = 5
                        },
                        new
                        {
                            Id = new Guid("912d1986-7424-43fa-a531-b9d811961386"),
                            StudioId = new Guid("d8fbc428-62b8-42aa-b3d7-b40658072dca"),
                            UserId = new Guid("3bea7392-a556-4a99-86c2-8cb244868283"),
                            Value = 4
                        },
                        new
                        {
                            Id = new Guid("960c4945-0b04-4c40-bd17-c697cb8d5eda"),
                            StudioId = new Guid("d8fbc428-62b8-42aa-b3d7-b40658072dca"),
                            UserId = new Guid("e482292a-5399-4938-9788-6d76fcb1b4d9"),
                            Value = 5
                        },
                        new
                        {
                            Id = new Guid("bb10aa9c-da74-4846-a075-7b203f22aefc"),
                            StudioId = new Guid("0d753e1d-c98b-47c7-b260-0377048c529a"),
                            UserId = new Guid("9f9bfaa5-da01-49bf-a819-3b88acf7487f"),
                            Value = 4
                        },
                        new
                        {
                            Id = new Guid("60502c16-c9bd-4653-94a6-fe623822a42e"),
                            StudioId = new Guid("0d753e1d-c98b-47c7-b260-0377048c529a"),
                            UserId = new Guid("1eb3a2eb-2184-4f8e-8ddd-569ea1522f2b"),
                            Value = 4
                        },
                        new
                        {
                            Id = new Guid("9056efb3-0f7d-4393-bca6-a61c8e92ceb5"),
                            StudioId = new Guid("c7998d5b-0017-4924-8544-49b4a276afe1"),
                            UserId = new Guid("2fceb9b7-fdd1-4062-b6d4-b81b3d7fd62d"),
                            Value = 2
                        },
                        new
                        {
                            Id = new Guid("9f5c4415-ce99-4d50-82cf-43fda2cdb71b"),
                            StudioId = new Guid("bf2832b2-5b62-471b-9980-583753504ca6"),
                            UserId = new Guid("2fceb9b7-fdd1-4062-b6d4-b81b3d7fd62d"),
                            Value = 3
                        },
                        new
                        {
                            Id = new Guid("ffd265a7-832d-4fc1-925c-5e72eab2d02e"),
                            StudioId = new Guid("df44a062-9586-4815-8126-99c240433b22"),
                            UserId = new Guid("2fceb9b7-fdd1-4062-b6d4-b81b3d7fd62d"),
                            Value = 4
                        });
                });

            modelBuilder.Entity("TheBeautyForum.Data.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5a322cf5-7101-4d4a-9e08-16382fc0a641"),
                            ConcurrencyStamp = "e8393d91-9ede-44d6-bdfb-7fecba284cbf",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("56bdecaf-285f-4a8e-b650-8bc997be759d"),
                            ConcurrencyStamp = "a778cea8-08b3-42c0-9e21-340e9a082042",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("71d6d7d8-f4f6-42b5-a9a9-ed2d3ef0bc73"),
                            ConcurrencyStamp = "16a14879-253d-46d4-b1d2-ab4c2f8dd55c",
                            Name = "StudioCreator",
                            NormalizedName = "STUDIOCREATOR"
                        });
                });

            modelBuilder.Entity("TheBeautyForum.Data.Models.Studio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("CloseTime")
                        .HasColumnType("time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeSpan>("OpenTime")
                        .HasColumnType("time");

                    b.Property<string>("StudioPictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Studios");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad94f69c-b7e6-419b-bef0-fa50ab04f254"),
                            CloseTime = new TimeSpan(0, 18, 0, 0, 0),
                            Description = "Dream haircuts can come true!",
                            IsApproved = false,
                            Location = "Varna, Bulgaria, ul. Zora 371",
                            Name = "Helita",
                            OpenTime = new TimeSpan(0, 9, 0, 0, 0),
                            StudioPictureUrl = "https://res.cloudinary.com/di1lcwb4r/image/upload/v1706708324/cjb6es4kqpy6kukryk8r.jpg",
                            UserId = new Guid("b313e2e1-0270-4a86-924b-71256500be8b")
                        },
                        new
                        {
                            Id = new Guid("0d753e1d-c98b-47c7-b260-0377048c529a"),
                            CloseTime = new TimeSpan(0, 18, 0, 0, 0),
                            Description = "Hairstyling and Haircutting",
                            IsApproved = true,
                            Location = "Stara Zagora, Bulgaria, ul. Tsar Kaloyan 3",
                            Name = "Murphy",
                            OpenTime = new TimeSpan(0, 9, 0, 0, 0),
                            StudioPictureUrl = "https://res.cloudinary.com/di1lcwb4r/image/upload/v1706708324/fnk089i9d440zt0vuhjm.jpg",
                            UserId = new Guid("b313e2e1-0270-4a86-924b-71256500be8b")
                        },
                        new
                        {
                            Id = new Guid("bf2832b2-5b62-471b-9980-583753504ca6"),
                            CloseTime = new TimeSpan(0, 18, 0, 0, 0),
                            Description = "Ina Vasileva's Studio",
                            IsApproved = true,
                            Location = "Varna, Bulgaria, ul. Veles 7",
                            Name = "IN Beauty",
                            OpenTime = new TimeSpan(0, 9, 0, 0, 0),
                            StudioPictureUrl = "https://res.cloudinary.com/di1lcwb4r/image/upload/v1706708324/omikwkyqnrafjnju82jf.jpg",
                            UserId = new Guid("1674d538-3cf0-4a6e-bc27-aa070a230647")
                        },
                        new
                        {
                            Id = new Guid("c7998d5b-0017-4924-8544-49b4a276afe1"),
                            CloseTime = new TimeSpan(0, 18, 0, 0, 0),
                            Description = "Hair Care Studio",
                            IsApproved = true,
                            Location = "Sofia, Bulgaria, ul. Dospat 44",
                            Name = "N-Stage",
                            OpenTime = new TimeSpan(0, 9, 0, 0, 0),
                            StudioPictureUrl = "https://res.cloudinary.com/di1lcwb4r/image/upload/v1706708324/ulq1xkktowireigsxuil.jpg",
                            UserId = new Guid("1674d538-3cf0-4a6e-bc27-aa070a230647")
                        },
                        new
                        {
                            Id = new Guid("df44a062-9586-4815-8126-99c240433b22"),
                            CloseTime = new TimeSpan(0, 18, 0, 0, 0),
                            Description = "SPA Studio",
                            IsApproved = true,
                            Location = "Sofia, Bulgaria, ul. Erovete 7",
                            Name = "Wellness Center",
                            OpenTime = new TimeSpan(0, 9, 0, 0, 0),
                            StudioPictureUrl = "https://res.cloudinary.com/di1lcwb4r/image/upload/v1706708324/wrm1h8b2sfjf06xujkck.jpg",
                            UserId = new Guid("1674d538-3cf0-4a6e-bc27-aa070a230647")
                        },
                        new
                        {
                            Id = new Guid("d8fbc428-62b8-42aa-b3d7-b40658072dca"),
                            CloseTime = new TimeSpan(0, 18, 0, 0, 0),
                            Description = "Bali&Thai Massages",
                            IsApproved = true,
                            Location = "Sofia, Bulgaria, ul. Aksakov 11",
                            Name = "Arsanta",
                            OpenTime = new TimeSpan(0, 9, 0, 0, 0),
                            StudioPictureUrl = "https://res.cloudinary.com/di1lcwb4r/image/upload/v1706708324/sf7gy9cpjrnlkn2ba8rs.jpg",
                            UserId = new Guid("b313e2e1-0270-4a86-924b-71256500be8b")
                        });
                });

            modelBuilder.Entity("TheBeautyForum.Data.Models.StudioCategory", b =>
                {
                    b.Property<Guid>("StudioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudioId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("StudiosCategories");

                    b.HasData(
                        new
                        {
                            StudioId = new Guid("ad94f69c-b7e6-419b-bef0-fa50ab04f254"),
                            CategoryId = new Guid("3be6b016-9b6a-4f68-b7ee-bf32293acca9")
                        },
                        new
                        {
                            StudioId = new Guid("ad94f69c-b7e6-419b-bef0-fa50ab04f254"),
                            CategoryId = new Guid("db7effe2-16bb-4539-9dec-0bda384b859f")
                        },
                        new
                        {
                            StudioId = new Guid("ad94f69c-b7e6-419b-bef0-fa50ab04f254"),
                            CategoryId = new Guid("1125ebe4-4f81-4bb8-90ee-aceaf509c4f3")
                        },
                        new
                        {
                            StudioId = new Guid("ad94f69c-b7e6-419b-bef0-fa50ab04f254"),
                            CategoryId = new Guid("8859c909-f5cf-4f72-ba53-5a9e6dfac34d")
                        },
                        new
                        {
                            StudioId = new Guid("0d753e1d-c98b-47c7-b260-0377048c529a"),
                            CategoryId = new Guid("3be6b016-9b6a-4f68-b7ee-bf32293acca9")
                        },
                        new
                        {
                            StudioId = new Guid("0d753e1d-c98b-47c7-b260-0377048c529a"),
                            CategoryId = new Guid("db7effe2-16bb-4539-9dec-0bda384b859f")
                        },
                        new
                        {
                            StudioId = new Guid("0d753e1d-c98b-47c7-b260-0377048c529a"),
                            CategoryId = new Guid("1125ebe4-4f81-4bb8-90ee-aceaf509c4f3")
                        },
                        new
                        {
                            StudioId = new Guid("0d753e1d-c98b-47c7-b260-0377048c529a"),
                            CategoryId = new Guid("8859c909-f5cf-4f72-ba53-5a9e6dfac34d")
                        },
                        new
                        {
                            StudioId = new Guid("bf2832b2-5b62-471b-9980-583753504ca6"),
                            CategoryId = new Guid("4ebb7e23-2a49-4451-8c96-b5c6de99900e")
                        },
                        new
                        {
                            StudioId = new Guid("bf2832b2-5b62-471b-9980-583753504ca6"),
                            CategoryId = new Guid("2da87f9f-d52a-4d4b-a8c6-37200c4cfeea")
                        },
                        new
                        {
                            StudioId = new Guid("c7998d5b-0017-4924-8544-49b4a276afe1"),
                            CategoryId = new Guid("3be6b016-9b6a-4f68-b7ee-bf32293acca9")
                        },
                        new
                        {
                            StudioId = new Guid("c7998d5b-0017-4924-8544-49b4a276afe1"),
                            CategoryId = new Guid("db7effe2-16bb-4539-9dec-0bda384b859f")
                        },
                        new
                        {
                            StudioId = new Guid("c7998d5b-0017-4924-8544-49b4a276afe1"),
                            CategoryId = new Guid("1125ebe4-4f81-4bb8-90ee-aceaf509c4f3")
                        },
                        new
                        {
                            StudioId = new Guid("c7998d5b-0017-4924-8544-49b4a276afe1"),
                            CategoryId = new Guid("8859c909-f5cf-4f72-ba53-5a9e6dfac34d")
                        },
                        new
                        {
                            StudioId = new Guid("df44a062-9586-4815-8126-99c240433b22"),
                            CategoryId = new Guid("f74035eb-e32d-4ddf-b381-8a757c7d5152")
                        },
                        new
                        {
                            StudioId = new Guid("df44a062-9586-4815-8126-99c240433b22"),
                            CategoryId = new Guid("569a4a94-57b0-48d3-930c-0d3ca92f7eb8")
                        },
                        new
                        {
                            StudioId = new Guid("df44a062-9586-4815-8126-99c240433b22"),
                            CategoryId = new Guid("42334109-d996-4339-b78c-4ba73fcdd824")
                        },
                        new
                        {
                            StudioId = new Guid("df44a062-9586-4815-8126-99c240433b22"),
                            CategoryId = new Guid("6f3f3c4a-9213-48a9-a112-362e10188983")
                        },
                        new
                        {
                            StudioId = new Guid("d8fbc428-62b8-42aa-b3d7-b40658072dca"),
                            CategoryId = new Guid("93474d31-0c93-4d01-9130-3b967b09a74a")
                        },
                        new
                        {
                            StudioId = new Guid("d8fbc428-62b8-42aa-b3d7-b40658072dca"),
                            CategoryId = new Guid("f63198ba-741e-42ca-b112-f08c0e193bbb")
                        },
                        new
                        {
                            StudioId = new Guid("d8fbc428-62b8-42aa-b3d7-b40658072dca"),
                            CategoryId = new Guid("b9b9950e-5ad6-4f44-87b0-e8811e9a59e2")
                        });
                });

            modelBuilder.Entity("TheBeautyForum.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6774a48a-7836-4ce6-9ef1-ea7be75b4ec5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "554757b3-9a93-4576-aad8-c97249fa3d1d",
                            Email = "simonapalieva@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Simona",
                            LastName = "Palieva",
                            LockoutEnabled = false,
                            NormalizedEmail = "SIMONAPALIEVA@MAIL.COM",
                            NormalizedUserName = "SIMONAPALIEVA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHRNmIMtfqCl/go28XeueTwSzxlTcjCZw3aMik/hi0OEgUVwHYNHLBdJwixiRu9lyQ==",
                            PhoneNumber = "0884912724",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/di1lcwb4r/image/upload/v1711218695/fngujmuenduudydw6g0m.png",
                            SecurityStamp = "1c3918a1-d015-4b97-96f1-9dcb72920f80",
                            TwoFactorEnabled = false,
                            UserName = "simonapalieva@mail.com",
                            UserRole = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("b313e2e1-0270-4a86-924b-71256500be8b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73a0dc1c-0b4a-420c-af7b-e225dfb2008c",
                            Email = "mirelametodieva@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Mirela",
                            LastName = "Metodieva",
                            LockoutEnabled = false,
                            NormalizedEmail = "MIRELAMETODIEVA@MAIL.COM",
                            NormalizedUserName = "MIRELAMETODIEVA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELWys8kj59Pd4LiS9guSbQomyE9Zzrf8ZDtfbnDoff3YGVwPjiMcrANRSBurTGkkGg==",
                            PhoneNumber = "0886666666",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/di1lcwb4r/image/upload/v1711219006/pqqa3hau5sceuvlbbvwk.jpg",
                            SecurityStamp = "f7cb3005-e79a-4e04-b77f-201ad836c155",
                            TwoFactorEnabled = false,
                            UserName = "mirelametodieva@mail.com",
                            UserRole = "Studio creator"
                        },
                        new
                        {
                            Id = new Guid("1674d538-3cf0-4a6e-bc27-aa070a230647"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d39142db-0295-45eb-bf72-594f55b67d00",
                            Email = "monailieva@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Mona",
                            LastName = "Ilieva",
                            LockoutEnabled = false,
                            NormalizedEmail = "MONAILIEVA@MAIL.COM",
                            NormalizedUserName = "MONAILIEVA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMZDbLO49Bg06aw4kU03RqLJmOLOTdOZkc6/1DL6HbFAc8cnaSYwa+SQjPY+NRdg7g==",
                            PhoneNumber = "0887777777",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/di1lcwb4r/image/upload/v1711366246/c1ijia1awr51quznbqgu.jpg",
                            SecurityStamp = "3228a0a5-b417-4113-b7ca-a9de5f6d9bd5",
                            TwoFactorEnabled = false,
                            UserName = "monailieva@mail.com",
                            UserRole = "Studio creator"
                        },
                        new
                        {
                            Id = new Guid("e482292a-5399-4938-9788-6d76fcb1b4d9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b21554d6-1d34-44d0-971c-09a52943ea46",
                            Email = "mariageorgieva@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Maria",
                            LastName = "Georgieva",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIAGEORGIEVA@MAIL.COM",
                            NormalizedUserName = "MARIAGEORGIEVA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENlzXf0p2WowVGhbuvCT81gjGGvJC62AXTdqBbNqebaD2kt2iFQMVgLSBD5T0SGQtQ==",
                            PhoneNumber = "0881111111",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/di1lcwb4r/image/upload/v1707378748/einenpgospeodkzbw8a7.jpg",
                            SecurityStamp = "a13342cf-2393-4932-9bb2-bf017873382b",
                            TwoFactorEnabled = false,
                            UserName = "mariageorgieva@mail.com",
                            UserRole = "User"
                        },
                        new
                        {
                            Id = new Guid("3bea7392-a556-4a99-86c2-8cb244868283"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c5797c27-3a60-4fea-aa72-59095e47b272",
                            Email = "amayaivanova@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Amaya",
                            LastName = "Ivanova",
                            LockoutEnabled = false,
                            NormalizedEmail = "AMAYAIVANOVA@MAIL.COM",
                            NormalizedUserName = "AMAYAIVANOVA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBcGJR4tU66ZmE/5JV5OJwcZnzZZWqyzl9j3/uJJFgsHl3dSHdmNnA/1kWPzRTXX9Q==",
                            PhoneNumber = "0882222222",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/di1lcwb4r/image/upload/v1706685966/imzfycue1optdhfmwbuw.jpg",
                            SecurityStamp = "5d2694ef-e00c-4313-b45e-619ae853446b",
                            TwoFactorEnabled = false,
                            UserName = "amayaivanova@mail.com",
                            UserRole = "User"
                        },
                        new
                        {
                            Id = new Guid("2fceb9b7-fdd1-4062-b6d4-b81b3d7fd62d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "79eedf5e-5736-450d-a7d5-d5a1bf458577",
                            Email = "aylintodorova@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Aylin",
                            LastName = "Todorova",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYLINTODOROVA@MAIL.COM",
                            NormalizedUserName = "AYLINTODOROVA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEECWSmPBGC7gXH2a16zT0OwxHDPE4XdChTkvIEiv0oQseh/bTfaYWZLdQgBM4Eehtw==",
                            PhoneNumber = "0883333333",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/di1lcwb4r/image/upload/v1707378004/kgdkin0zow7lkpkc4hdy.jpg",
                            SecurityStamp = "09abba18-9560-4b3f-a89a-0634d91e94ed",
                            TwoFactorEnabled = false,
                            UserName = "aylintodorova@mail.com",
                            UserRole = "User"
                        },
                        new
                        {
                            Id = new Guid("9f9bfaa5-da01-49bf-a819-3b88acf7487f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "44e9a78d-4c84-438c-bd85-f51c64bde611",
                            Email = "deboramileva@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Debora",
                            LastName = "Mileva",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEBORAMILEVA@MAIL.COM",
                            NormalizedUserName = "DEBORAMILEVA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEF0MZd2IE2KI2i3tTo2pJvHW+vJcluGALXNgSgF5QRwnCSe/9uypv/IpmQOMvC/cwQ==",
                            PhoneNumber = "0884444444",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/di1lcwb4r/image/upload/v1706685966/npkpvs3b2i1tldoc7dmi.jpg",
                            SecurityStamp = "55a432db-0438-471c-9e2a-a7743989dced",
                            TwoFactorEnabled = false,
                            UserName = "deboramileva@mail.com",
                            UserRole = "User"
                        },
                        new
                        {
                            Id = new Guid("1eb3a2eb-2184-4f8e-8ddd-569ea1522f2b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f4bd9a6-b5ad-4293-a6ea-9311b5e3285a",
                            Email = "lisaborisova@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Lisa",
                            LastName = "Borisova",
                            LockoutEnabled = false,
                            NormalizedEmail = "LISABORISOVA@MAIL.COM",
                            NormalizedUserName = "LISABORISOVA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHshHQLkJI2lu8HkgsAGoqj3OSsi4UMIFseH2ByxSA8ZREJnnS8jvAyCpVsPgUT23A==",
                            PhoneNumber = "0885555555",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/di1lcwb4r/image/upload/v1709708446/am3nsitkxsxivfdoxey9.jpg",
                            SecurityStamp = "254c3072-09b7-4af3-906d-7401379fb64b",
                            TwoFactorEnabled = false,
                            UserName = "lisaborisova@mail.com",
                            UserRole = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("TheBeautyForum.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TheBeautyForum.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TheBeautyForum.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("TheBeautyForum.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBeautyForum.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TheBeautyForum.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TheBeautyForum.Data.Models.Appointment", b =>
                {
                    b.HasOne("TheBeautyForum.Data.Models.Category", "Category")
                        .WithMany("Appointments")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBeautyForum.Data.Models.Studio", "Studio")
                        .WithMany("Appointments")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBeautyForum.Data.Models.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Studio");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheBeautyForum.Data.Models.Image", b =>
                {
                    b.HasOne("TheBeautyForum.Data.Models.Publication", "Publication")
                        .WithOne("Image")
                        .HasForeignKey("TheBeautyForum.Data.Models.Image", "PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("TheBeautyForum.Data.Models.Like", b =>
                {
                    b.HasOne("TheBeautyForum.Data.Models.Publication", "Publication")
                        .WithMany("Likes")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBeautyForum.Data.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publication");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheBeautyForum.Data.Models.Publication", b =>
                {
                    b.HasOne("TheBeautyForum.Data.Models.Studio", "Studio")
                        .WithMany("Publications")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBeautyForum.Data.Models.User", "User")
                        .WithMany("Publications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Studio");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheBeautyForum.Data.Models.Rating", b =>
                {
                    b.HasOne("TheBeautyForum.Data.Models.Studio", "Studio")
                        .WithMany("Ratings")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBeautyForum.Data.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Studio");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheBeautyForum.Data.Models.Studio", b =>
                {
                    b.HasOne("TheBeautyForum.Data.Models.User", "User")
                        .WithMany("Studios")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheBeautyForum.Data.Models.StudioCategory", b =>
                {
                    b.HasOne("TheBeautyForum.Data.Models.Category", "Category")
                        .WithMany("CategoryStudios")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBeautyForum.Data.Models.Studio", "Studio")
                        .WithMany("StudioCategories")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("TheBeautyForum.Data.Models.Category", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("CategoryStudios");
                });

            modelBuilder.Entity("TheBeautyForum.Data.Models.Publication", b =>
                {
                    b.Navigation("Image");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("TheBeautyForum.Data.Models.Studio", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Publications");

                    b.Navigation("Ratings");

                    b.Navigation("StudioCategories");
                });

            modelBuilder.Entity("TheBeautyForum.Data.Models.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Likes");

                    b.Navigation("Publications");

                    b.Navigation("Ratings");

                    b.Navigation("Studios");
                });
#pragma warning restore 612, 618
        }
    }
}
